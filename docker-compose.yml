services:
#  consumerapp:
#    image: consumerapp
#    build:
#      context: .
#      dockerfile: ConsumerApp/Dockerfile
#    networks:
#        - custom_network
#
#  producerapp:
#    image: producerapp
#    build:
#      context: .
#      dockerfile: ProducerApp/Dockerfile
#    networks:
#        - custom_network

  zookeeper:
    image: "confluentinc/cp-zookeeper:7.2.1"
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      TZ: Portugal
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - custom_network

  kafka:
    image: "confluentinc/cp-enterprise-kafka:7.2.1"
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_ENABLE: 'true'
    networks:
      - custom_network
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "kafka:29092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5

#  init-kafka-container:
#      image: "confluentinc/cp-enterprise-kafka:6.1.0"
##      depends_on:
##        kafka:
##          condition: service_healthy
#
#      entrypoint: [ '/bin/sh', '-c' ]
#      command: |
#        "
#        # rather than giving sleep 15 use this
#        # to block init container to wait for Kafka broker to be ready
#        kafka-topics --bootstrap-server kafka:9092 --list
#
#        # create init topics
#        # kafka-topics --create --partitions 3 --bootstrap-server kafka:9092 --topic presentation-topic
#        kafka-topics --create --partitions 3 --bootstrap-server kafka:9092 --topic avro-topic
#        "
#      networks:
#        - custom_network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      kafka:
        condition: service_healthy

    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - custom_network

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.2.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
      - zookeeper
      - schema-registry
    ports:
      - "9021:9021"
    networks:
      - custom_network
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

networks:
  custom_network:
    driver: bridge